## print text in color
##
## @author Daniel Andreca <sci2tech@gmail.com>
## @since   1.0.7
## @version 1.0.7
## @param	String 	color	Color to print
## @param	String 	text	text to print
## @return	int	0 on success, -1 otherwise
colorStart(){
	local _color="${1}" _temp=
	if [ -z "${_color}" ]; then 
		_color='red'
	fi
	if [ ! -z "${_color}" ]; then
		local \
			black="0;30" \
			dark_gray="1;30" \
			red="0;31" \
			light_red="1;31" \
			green="0;32" \
			light_green="1;32" \
			brown="0;33" \
			yellow="1;33" \
			blue="0;34" \
			light_blue="1;34" \
			purple="0;35" \
			light_purple="1;35" \
			cyan="0;36" \
			light_cyan="1;36" \
			light_gray="0;37" \
			white="1;37"
		eval _temp=\$${_color}
		if [ ! -z "${_temp}" ]; then 
			 printf "\033[${_temp}m"
		fi	
	fi
}
colorEnd(){
	 printf "\033[0m"
}
colortxt() {
	local  _color="${1}" _text="${2}"
	if [ -z "${_color}" ]; then 
		printf "[ERROR] colortxt: Not enought parameters!\n"
		exit 1
	fi
	if [ -z "${_text}" ]; then 
		_color=''
		_text="${1}"
	fi
	colorStart "${_color}"; printf "${_text}"; colorEnd;
}
underline() {
	local _text="$1" _rval="$2" _color="$3" _temp=''
	if ( [ -z "$1" ] || [ -z "$2" ] ); then 
		printf "ERROR: Not enought parameters $1 $2\n"
		exit 1
	fi
	if [ ! -z "$_color" ]; then
		local \
			black="0;30" \
			dark_gray="1;30" \
			red="0;31" \
			light_red="1;31" \
			green="0;32" \
			light_green="1;32" \
			brown="0;33" \
			yellow="1;33" \
			blue="0;34" \
			light_blue="1;34" \
			purple="0;35" \
			light_purple="1;35" \
			cyan="0;36" \
			light_cyan="1;36" \
			light_gray="0;37" \
			white="1;37"
		eval _temp=\$$_color
		if [ ! -z "$_temp" ]; then 
			_temp="\033[${_temp}m${_text}\033[0m"
			eval $_rval='$_temp'
		fi	
	fi
}
oktxt() {
	local _text=$1
	if [ -z $_text ]; then _text='ok'; fi
	printf '[ '; colortxt 'green' $_text; printf " ]"
}
warntxt() {
	local _text="${1}"
	if [ -z $_text ]; then _text='warning'; fi
	printf '[ '; colortxt 'yellow' "${_text}"; printf " ]"
}
failtxt() {
	local _text="${1}"
	if [ -z "$_text" ]; then _text='fail'; fi
	printf '[ '; colortxt 'red' "${_text}"; printf " ]\n"
	printf '[ '; colortxt 'red' 'EXITING...'; printf " ]\n"
	exit
}
title() {
	printf "\n\033[4m${1}\033[0m\n";
}
getSize() {
	test -x /usr/bin/tty && CONSOLE=`/usr/bin/tty`
	test -z "$CONSOLE" && CONSOLE=/dev/console
	SIZE=$(stty size < $CONSOLE)
	SCREEN_W=${SIZE#*\ }
	SCREEN_H=${SIZE%%\ *}
}
setDimensions() {
	getSize
	if [ "$SCREEN_W" -gt 0 ]; then
		MAX_W=$(($SCREEN_W-2))
	fi
	if [ "$SCREEN_H" -gt 0 ]; then
		MAX_H=$(($SCREEN_H-2))
	fi
	TEXT_W=`echo "$1" | wc -L`
	TEXT_H=`echo "$1" | wc -l`
	DIALOG_H=$(($TEXT_H+8))
	THRESH=$((2*$DIALOG_H))
	DIALOG_W=$(($TEXT_W+8))
	if [ $DIALOG_W -lt $THRESH ]; then
		DIALOG_W=$((2*$DIALOG_W))
	fi
	if [ "$DIALOG_W" -lt 20 ]
	then
		DIALOG_W=20
	fi
	if [ "$DIALOG_H" -lt 10 ]
	then
		DIALOG_H=10
	fi
	if [ "$DIALOG_W" -gt "$MAX_W" ]
	then
		DIALOG_W=$MAX_W
	fi
	if [ "$DIALOG_H" -gt "$MAX_H" ]
	then
		DIALOG_H=$MAX_H
	fi
}
msgbox() {
	setDimensions "$1"
	if [ "${3}" ]; then params=" --backtitle ${3}"; fi
	if [ "${2}" ]; then params="$params --title ${2}"; fi
	$DIALOG $params --msgbox "${1}" $DIALOG_H $DIALOG_W
}
msgopts() {
	local _params='' _title="${1}" _options="${2}" _default="${3}" _size=''
	if ( [ -z "${1}" ] || [ -z "${2}" ] || [ -z "${3}" ] ); then colortxt "makeopts need 3 parameter! none provided!!! "; failtxt; exit 1; fi
	for OPTION in ${_options}; do
		if [ "${OPTION}" = "${_default}" ]; then 
			_params="$_params ${OPTION} '' ON"
		else 
			_params="$_params ${OPTION} '' OFF"
		fi
	done
	_size=$(echo "${_options}" | wc -w)
	setDimensions "$1"
	eval "$DIALOG --radiolist '${_title}' $(($_size+$DIALOG_H)) ${DIALOG_W} ${_size} ${_params}"
}
msgask() {
	case "$DIALOG" in
	*whiptail)
		if [ "${2}" ]; then params=" --yes-button ${2}"; fi
		if [ "${3}" ]; then params="$params --no-button ${3}"; fi
	;;
	esac
	setDimensions "$1"
	eval "$DIALOG $params --yesno '${1}' ${DIALOG_H} ${DIALOG_W}" 
}

