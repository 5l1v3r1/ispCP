#!/usr/bin/perl

package ispcp_ssl;
use strict;
use warnings;

sub new {
	my $self  = {};
	$self->{openssl_path}		= undef;
	$self->{new_cert_path}		= undef;
	$self->{new_cert_name}		= undef;
	$self->{vhost_cert_name}	= undef;
	$self->{cert_selfsigned}	= undef;
	$self->{cert_path}		= undef;
	$self->{intermediate_cert_path}	= undef;
	$self->{key_path}		= undef;
	$self->{key_pass}		= undef;
	$self->{errors}			= '';
	$self->{last_error}		= '';
	bless($self);
	return $self;
}

sub ssl_set_prop{
	my ($self, $var) = (shift, undef);
	if (@_) {
		$var = shift;
		if (@_) { $self->{$var} = shift; }
	}
	return ( defined( $var ) && defined( $self->{$var} ) ) ? $self->{$var} : undef;
}


sub ssl_openssl_path {
	my $self = shift;
	if (@_) { $self->{openssl_path} = shift }
	return $self->{openssl_path};
}

sub ssl_new_cert_path {
	my $self = shift;
	if (@_) { $self->{new_cert_path} = shift }
	return $self->{new_cert_path};
}

sub ssl_new_cert_name {
	my $self = shift;
	if (@_) { $self->{new_cert_name} = shift }
	return $self->{new_cert_name};
}

sub ssl_vhost_cert_name{
	my $self = shift;
	if (@_) { $self->{vhost_cert_name} = shift }
	return $self->{vhost_cert_name};
}

sub ssl_cert_selfsigned {
	my $self = shift;
	if (@_) { $self->{cert_selfsigned} = shift }
	return $self->{cert_selfsigned};
}

sub ssl_get_last_error {
	my $self = shift;
	return $self->{last_error};
}

sub ssl_get_errors {
	my $self = shift;
	return $self->{errors};
}

sub ssl_cert_path {
	my $self = shift;
	if (@_) { $self->{cert_path} = shift }
	return $self->{cert_path};
}

sub ssl_intermediate_cert_path {
	my $self = shift;
	if (@_) { $self->{intermediate_cert_path} = shift }
	return $self->{intermediate_cert_path};
}

sub ssl_key_path {
	my $self = shift;
	if (@_) { $self->{key_path} = shift }
	return $self->{key_path};
}

sub ssl_key_pass {
	my $self = shift;
	if (@_) { $self->{key_pass} = shift }
	return $self->{key_pass};
}

sub ssl_check_intermediate_cert {
	my $self = shift;

	if( !defined($self->{intermediate_cert_path}) || ( $self->{intermediate_cert_path} eq '' ) ){
		return 0;
	}

	if ( ! -e "$self->{intermediate_cert_path}" ) {
		$self->{errors} .= $self->{last_error} = "\tERROR: Intermediate certificate $self->{intermediate_cert_path} do not exists. Exiting...\n\n";
		return -1;
	}

	return 0;
}

sub ssl_check_cert {
	my $self = shift;

	if ( ! -e "$self->{cert_path}" ){
		$self->{errors} .= $self->{last_error} = "\tERROR: Certificate $self->{cert_path} do not exists. Exiting...\n\n";
		return -1;
	}

	my $CAfile = '';
	
	if ( defined($self->{intermediate_cert_path}) && ( $self->{intermediate_cert_path} ne '' ) ) {
			$CAfile = "-CAfile $self->{intermediate_cert_path}";
	}

	my $cmd = "$self->{openssl_path} verify $CAfile $self->{cert_path} 2>/dev/nul";
	my $data = `$cmd`;

	if ( ! ($data =~ m~$self->{cert_path}: OK~) ){
		$self->{errors} .= $self->{last_error} = "\tERROR: Certificate $self->{cert_path} is not valid. Exiting...\n\n";
		return -1;
	}

	return 0;
}

sub ssl_check_key {
	my $self = shift;

	if ( ! -e "$self->{key_path}" ){
		$self->{errors} .= $self->{last_error} = "\tERROR: Key $self->{key_path} do not exists. Exiting......\n\n";
		return -1;
	}

	my $cmd = "$self->{openssl_path} rsa -in $self->{key_path} -noout -passin pass:$self->{key_pass} >/dev/null 2>&1";

	my $rs = main::sys_command($cmd);
	if ($rs != 0){
		$self->{errors} .= $self->{last_error} = "\tERROR: Key $self->{key_path} is invalid or password is wrong. Exiting...\n\n";
	}

	return $rs;
}

sub ssl_check_all{
	my $self = shift;
	
	my $rt = 0;
	
	my $rs = $self->ssl_check_key();
	$rt = 1 if ($rs != 0);

	$rs = $self->ssl_check_intermediate_cert();
	$rt = 1 if ($rs != 0);

	$rs = $self->ssl_check_cert();
	$rt = 1 if ($rs != 0);

	return $rt;
}

sub ssl_export_key {
	my $self = shift;

	my $cmd = "$self->{openssl_path} rsa -in $self->{key_path} -out $self->{new_cert_path}/$self->{new_cert_name}.pem -passin pass:$self->{key_pass} >/dev/null 2>&1";

	my $rs = main::sys_command($cmd);
	if ($rs != 0){
		$self->{errors} .= $self->{last_error} = "\tERROR: Can not save certificate key. Exiting...\n\n";
	}

	return $rs;
}

sub ssl_export_cert {
	my $self = shift;

	my $cmd = "$self->{openssl_path} x509 -in $self->{cert_path} -outform PEM >> $self->{new_cert_path}/$self->{new_cert_name}.pem 2>/dev/null";

	my $rs = main::sys_command($cmd);
	if ($rs != 0){
		$self->{errors} .= $self->{last_error} = "\tERROR: Can not save certificate. Exiting...\n\n";
	}

	return $rs;
}

sub ssl_export_intermediate_cert {
	my $self = shift;

	if ( !defined($self->{intermediate_cert_path} ) || ( $self->{intermediate_cert_path} eq '' ) ) {
		return 0;
	}

	my $cmd = "$self->{openssl_path} x509 -in $self->{intermediate_cert_path} -outform PEM >> $self->{new_cert_path}/$self->{new_cert_name}.pem 2>/dev/null";

	my $rs = main::sys_command($cmd);
	if ($rs != 0){
		$self->{errors} .= $self->{last_error} = "\tERROR: Can not save intermediate certificate. Exiting...\n\n";
	}

	return $rs;
}

sub ssl_generate_selsigned_cert(){
	my $self = shift;

	my $cmd = "$self->{openssl_path} req -x509 -nodes -days 365 -subj '/C=/ST=/L=/CN=$self->{vhost_cert_name}' -newkey rsa:1024 -keyout $self->{new_cert_path}/$self->{new_cert_name}.pem -out $self->{new_cert_path}/$self->{new_cert_name}.pem >/dev/null 2>&1";
	
	my $rs = main::sys_command($cmd);
	if ($rs != 0){
		$self->{errors} .= $self->{last_error} = "\tERROR: Can not create selsigned certificate. Exiting...\n\n";
	}

	return $rs;
}

sub ssl_export_all{
	my ($self, $rt) = (shift, 0);

	if( $self->{cert_selfsigned} == 0 ){

		$rt = $self->ssl_generate_selsigned_cert();

	} else {

		my $rs = $self->ssl_export_key();
		$rt = 1 if ($rs != 0);

		$rs = $self->ssl_export_intermediate_cert();
		$rt = 1 if ($rs != 0);

		$rs = $self->ssl_export_cert();
		$rt = 1 if ($rs != 0);

	}

	return $rt;
}


1;
