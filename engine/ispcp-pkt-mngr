#!/usr/bin/perl

# ispCP ? (OMEGA) a Virtual Hosting Control Panel
# Copyright (c) 2001-2006 by moleSoftware GmbH
# http://www.molesoftware.com
# Copyright (c) 2006-2009 by isp Control Panel
# http://isp-control.net
#
#
# License:
#	This program is free software; you can redistribute it and/or
#	modify it under the terms of the MPL Mozilla Public License
#	as published by the Free Software Foundation; either version 1.1
#	of the License, or (at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	MPL Mozilla Public License for more details.
#
#	You may have received a copy of the MPL Mozilla Public License
#	along with this program.
#
#	An on-line copy of the MPL Mozilla Public License can be found
#	http://www.mozilla.org/MPL/MPL-1.1.html
#
#
# The ISPCP ? Home Page is at:
#
#	http://isp-control.net
#

use FindBin;
use lib "$FindBin::Bin/";
require 'ispcp_common_code.pl';

use strict;
use XML::Parser;
use warnings;

my $sw_software_id = $ARGV[0];
my $sw_reseller_id = $ARGV[1];
my $sw_software_archive = $ARGV[2];
my $sw_status = $ARGV[3];
my $sw_software_depot = $ARGV[4];


sub pkt_mngr_start_up {
	my ($rs, $rdata) = (undef, undef);
	push_el(\@main::el, 'pkt_mngr_start_up()', 'Starting...');
	# Let's clear Execution Logs, if any.
	if (-e $main::ispcp_pkt_mngr_el) {
		$rs = del_file($main::ispcp_pkt_mngr_el);
		return $rs if ($rs != 0);
	}
	# config check;
	$rs = get_conf();
	return $rs if ($rs != 0);
	# sql check;

	#
	# getting initial data also must be done here;
	#

	my $sql = "
		SELECT
			software_id,
			reseller_id,
			software_name,
			software_version,
			software_type,
			software_db,
			software_archive,
			software_prefix,
			software_link,
			software_desc,
			software_active,
			software_status,
			software_depot
		FROM
			web_software
		LIMIT 0,1
	";
	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	#
	# getting task id and domain record id;
	#

	$main::sw_software_id = $ARGV[0];
	push_el(\@main::el, 'pkt_mngr_start_up()', 'Ending...');
	return 0;
}

sub pkt_mngr_shut_down {
	my $rs = undef;
	push_el(\@main::el, 'pkt_mngr_shut_down()', 'Starting...');
	push_el(\@main::el, 'pkt_mngr_shut_down()', 'Ending...');
	return 0;
}

#
# Software packet add
#


sub pkt_add_data {
	push_el(\@main::el, 'pkt_add_data()', 'Starting...');
	my ($sw_software_id, $sw_software_archive, $sw_src_path, $sw_tmp_path, $sw_install_xml_file,$sw_uninstall_xml_file) = @_;
	my $rs = undef;
	my $sql = undef;
	our ($tag, $data) = "";
	$rs = sys_command_rs("$main::cfg{'CMD_MKDIR'} -p $sw_tmp_path/");
	chdir ("$sw_tmp_path");
	$rs = sys_command_rs("$main::cfg{'CMD_CP'} $sw_src_path-$sw_software_id.tar.gz $sw_tmp_path/");
	$rs = sys_command_rs("$main::cfg{'CMD_TAR'} -xzf $sw_tmp_path/$sw_software_archive-$sw_software_id.tar.gz");
	if (-e $sw_install_xml_file && -e $sw_uninstall_xml_file && -d $sw_tmp_path."/sql/" && -d $sw_tmp_path."/web/" && -e $sw_tmp_path."/".$sw_software_archive) {
		our %INSTALL_DATA = (software_name		=>	'',
							software_version	=>	'',
							software_type		=>	'',
							software_db			=>	'',
							software_prefix		=>	'',
							software_link		=>	'',
							software_desc		=>	''
							);
		my $parser = new XML::Parser ();
		$parser->setHandlers (
							Start   => \&startElement,
							End     => \&endElement,
							Char    => \&characterData
							);
		$parser->parsefile ($sw_install_xml_file);
		
		sub startElement {
			my ($parseinst, $element, %attrs) = @_;
			SWITCH: {
				if ($element eq "software_name") {
					$tag = "software_name";
					last SWITCH;
				}
				if ($element eq "software_version") {
					$tag = "software_version";
					last SWITCH;
				}
				if ($element eq "software_type") {
					$tag = "software_type";
					last SWITCH;
				}
				if ($element eq "software_db") {
					$tag = "software_db";
					last SWITCH;
				}
				if ($element eq "software_prefix") {
					$tag = "software_prefix";
					last SWITCH;
				}
				if ($element eq "software_link") {
					$tag = "software_link";
					last SWITCH;
				}
				if ($element eq "software_desc") {
					$tag = "software_desc";
					last SWITCH;
				}
			}
		}
		sub endElement {
			my( $parseinst, $element ) = @_;
		}
		sub characterData {
			my( $parseinst, $data ) = @_;
			if (($tag eq "software_name") || ($tag eq "software_version") || ($tag eq "software_type")  || ($tag eq "software_db")) {
				$data =~ s/\n|\t//g;
				if ($data ne "") {
					$INSTALL_DATA{$tag} .= $data;
				}
			} elsif (($tag eq "software_prefix") || ($tag eq "software_link") || ($tag eq "software_desc")) {
				$data =~ s/\n|\t//g;
				if ($data ne "") {
					$INSTALL_DATA{$tag} .= $data;
				}
			}
		}
		if ($INSTALL_DATA{software_name} ne "" && $INSTALL_DATA{software_version} ne "" && $INSTALL_DATA{software_type} ne "" &&
			$INSTALL_DATA{software_db} ne "" && $INSTALL_DATA{software_prefix} ne "" && $INSTALL_DATA{software_link} ne "" &&
			$INSTALL_DATA{software_desc} ne ""){
			if ($INSTALL_DATA{software_db} ne "true") {
				$INSTALL_DATA{software_db} = "0";
				$INSTALL_DATA{software_prefix} = "not_required";
			} else {
				$INSTALL_DATA{software_db} = "1";
			}
			$sql = "
				UPDATE
					web_software
				SET 
					software_name = '".$INSTALL_DATA{software_name}."',
					software_version = '".$INSTALL_DATA{software_version}."',
					software_type = '".$INSTALL_DATA{software_type}."',
					software_db = '".$INSTALL_DATA{software_db}."',
					software_prefix = '".$INSTALL_DATA{software_prefix}."',
					software_link = '".$INSTALL_DATA{software_link}."',
					software_desc = '".$INSTALL_DATA{software_desc}."',
					software_status = 'ready'
				WHERE
					software_id = ".$sw_software_id."
			";
			$rs = doSQL($sql);
			$rs = sys_command_rs("$main::cfg{'CMD_RM'} -rf $sw_tmp_path");
		} else {
			$sql = "update web_software set software_status='delete' where software_id = ".$sw_software_id;
			$rs = doSQL($sql);
			$rs = sys_command_rs("$main::cfg{'CMD_RM'} -rf $sw_tmp_path");
			$rs = 11; #No Data found
		}
	} else {
		$sql = "update web_software set software_status='delete' where software_id = ".$sw_software_id;
		$rs = doSQL($sql);
		$rs = sys_command_rs("$main::cfg{'CMD_RM'} -rf $sw_tmp_path");
		$rs = 10; #No XML-File
	}
	return $rs if ($rs != 0);
	push_el(\@main::el, 'sw_add_data()', 'Ending...');
	return 0;
}

%main::cleared = ();

sub pkt_mngr_engine {
	my ($rs, $rows, $rdata) = (undef, undef, undef);
	push_el(\@main::el, 'pkt_mngr_engine()', 'Starting...');
	my $sql;
	my $query;
	my $sw_src_path = "";
	
	my $gui_software_dir = $main::cfg{'GUI_SOFTWARE_DIR'};
	my $gui_softwaredepot_dir = $main::cfg{'GUI_SOFTWARE_DEPOT_DIR'};
	my $software_tmp_dir = $main::cfg{'SOFTWARE_TMP_DIR'};
	if ($sw_software_depot eq 'yes') {
		$sw_src_path = "$gui_softwaredepot_dir/$sw_software_archive";
	}else{
		$sw_src_path = "$gui_software_dir/$sw_reseller_id/$sw_software_archive";
	}
	my $sw_tmp_path = "$software_tmp_dir/sw-$sw_software_archive-$sw_software_id";
	my $sw_install_xml_file = "$software_tmp_dir/sw-$sw_software_archive-$sw_software_id/xml/install.xml";
	my $sw_uninstall_xml_file = "$software_tmp_dir/sw-$sw_software_archive-$sw_software_id/xml/uninstall.xml";
	if ($sw_status eq 'toadd') {
		my @entry = ($sw_software_id, $sw_software_archive, $sw_src_path, $sw_tmp_path, $sw_install_xml_file,$sw_uninstall_xml_file);
		$rs = pkt_add_data(@entry);
		return $rs if ($rs != 0);
	}
}
my $rs = undef;
$rs = pkt_mngr_start_up();
if ($rs != 0) {
    dump_el(\@main::el, $main::ispcp_pkt_mngr_el);
    pkt_mngr_shut_down();
    exit 1;
}
$rs = pkt_mngr_engine();
if ($rs != 0) {
    dump_el(\@main::el, $main::ispcp_pkt_mngr_el);
    ws_mngr_shut_down();
    exit 1;
}
$rs = pkt_mngr_shut_down();
if ($rs != 0) {
    dump_el(\@main::el, $main::ispcp_pkt_mngr_el);
    exit 1;
}
exit 0;
